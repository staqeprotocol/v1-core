{"abi":[{"type":"function","name":"addReward","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","internalType":"uint256"},{"name":"claimAfterBlocks","type":"uint256","internalType":"uint256"},{"name":"isForERC721Stakers","type":"bool","internalType":"bool"}],"outputs":[{"name":"rewardId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimRewards","inputs":[{"name":"poolIds","type":"uint256[]","internalType":"uint256[]"},{"name":"rewardIds","type":"uint256[][]","internalType":"uint256[][]"},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[{"name":"tokens","type":"address[][]","internalType":"contract IERC20[][]"},{"name":"amounts","type":"uint256[][]","internalType":"uint256[][]"}],"stateMutability":"nonpayable"},{"type":"function","name":"editPool","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"metadata","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"launchPool","inputs":[{"name":"stakeERC20","type":"address","internalType":"contract IERC20"},{"name":"stakeERC721","type":"address","internalType":"contract IERC721"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"rewarder","type":"address","internalType":"address"},{"name":"metadata","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"poolId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"stake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"stakeId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"unstake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"stakeIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"amountERC20","type":"uint256","internalType":"uint256"},{"name":"idsERC721","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"event","name":"PoolEdited","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"metadata","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"PoolLaunched","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeERC20","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"stakeERC721","type":"address","indexed":true,"internalType":"contract IERC721"},{"name":"rewardToken","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"rewarder","type":"address","indexed":false,"internalType":"address"},{"name":"metadata","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RewardAdded","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardToken","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalStakedERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalStakedERC721","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isForERC721Stakers","type":"bool","indexed":false,"internalType":"bool"},{"name":"claimAfterBlock","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardClaimed","inputs":[{"name":"claimant","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardToken","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeCreated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeAmountERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"stakeAmountERC721","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeWithdrawn","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeAmountERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"stakeAmountERC721","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InvalidAmountOrId","inputs":[]},{"type":"error","name":"InvalidERC721Token","inputs":[]},{"type":"error","name":"InvalidMetadata","inputs":[]},{"type":"error","name":"InvalidRewardToken","inputs":[]},{"type":"error","name":"InvalidStakeToken","inputs":[]},{"type":"error","name":"OnlyAvailableToStakersInGenesis","inputs":[]},{"type":"error","name":"OnlyRewinderHasAccessToAddRewards","inputs":[]},{"type":"error","name":"OnlyRewinderHasAccessToEditMetadata","inputs":[]},{"type":"error","name":"PoolDoesNotExist","inputs":[]},{"type":"error","name":"PoolDoesNotHaveStakes","inputs":[]},{"type":"error","name":"RewardAlreadyClaimed","inputs":[]},{"type":"error","name":"RewardIsEmpty","inputs":[]},{"type":"error","name":"RewardIsNotYetAvailableForClaim","inputs":[]},{"type":"error","name":"RewardNotFoundInPool","inputs":[]},{"type":"error","name":"RewardTransferFailed","inputs":[]},{"type":"error","name":"StakeTransferFailed","inputs":[]},{"type":"error","name":"StakerDoesNotHaveStakesInPool","inputs":[]},{"type":"error","name":"UnstakeOnNextBlockAndGetReward","inputs":[]},{"type":"error","name":"UnstakeTransferFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addReward(uint256,address,uint256,uint256,bool)":"7ebfee3e","claimRewards(uint256[],uint256[][],address)":"99a47faa","editPool(uint256,bytes32)":"e964a1a5","launchPool(address,address,address,address,bytes32)":"ba2b6651","stake(uint256,uint256,uint256)":"a638f2e2","unstake(uint256,uint256[])":"395de242"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAmountOrId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAvailableToStakersInGenesis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewinderHasAccessToAddRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewinderHasAccessToEditMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotHaveStakes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsNotYetAvailableForClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardNotFoundInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakerDoesNotHaveStakesInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeOnNextBlockAndGetReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"PoolEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"stakeERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"stakeERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"PoolLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedERC721\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isForERC721Stakers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAfterBlock\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC721\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC721\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAfterBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForERC721Stakers\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"rewardIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"editPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeERC20\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"stakeERC721\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"launchPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountERC20\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsERC721\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract offers a robust platform for decentralized finance (DeFi) applications, focusing on staking mechanisms. It facilitates the creation and management of multiple staking pools, each with unique staking criteria, rewards, and durations. Users can engage in staking activities, claim rewards based on their contributions, and manage their stakes across various pools. The contract is designed with flexibility in mind, allowing for the addition, modification, and querying of pools and stakes. Key Features: - **Dynamic Staking Pools**: Supports the creation of multiple staking pools, each with its   own set of rules and rewards, allowing for a diverse range of staking opportunities. - **Stake Management**: Users can stake tokens, unstake tokens, and claim rewards, with the   contract handling the calculation and distribution of rewards based on predefined pool rules. - **Transparency and Security**: Implements secure and transparent staking processes, ensuring   users have clear insights into their staking positions and rewards. - **ERC-721 Support**: Includes compatibility with ERC-721 tokens, enabling staking functionalities   for NFT assets alongside traditional ERC-20 tokens. The contract is structured to provide a comprehensive staking solution for the DeFi sector, catering to both ERC-20 and ERC-721 assets. It aims to offer a user-friendly interface for staking, while ensuring the security and integrity of the staking process.\",\"kind\":\"dev\",\"methods\":{\"addReward(uint256,address,uint256,uint256,bool)\":{\"custom:error\":\"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.InvalidRewardToken Reverts if the reward token address is zero.RewardIsEmpty Reverts if the reward amount is zero or less.OnlyRewinderHasAccessToAddRewards Reverts if the caller is not the designated               rewarder for the pool or if the pool does not have a designated rewarder.PoolDoesNotHaveStakes Reverts if the pool has no eligible stakes for the type               of stakers specified by `isForERC721Stakers`.RewardTransferFailed Reverts if the transfer of reward tokens from the caller to               the contract fails.\",\"details\":\"This function allows adding rewards to a pool, with the option to specify whether      the reward is for ERC721 stakers or ERC20 stakers within the pool. It validates      the existence of the pool, the validity of the reward token, and the reward amount.      The function also checks if the caller is authorized as the rewarder for the pool and ensures      there are eligible stakers in the pool. The reward is recorded, and the reward tokens      are transferred from the caller to this contract. Emits a `RewardAdded` event upon successful      addition of the reward.\",\"params\":{\"claimAfterBlocks\":\"The number of blocks after which the reward can be claimed.\",\"isForERC721Stakers\":\"A boolean flag indicating whether the reward is designated                           for ERC721 stakers (true) or ERC20 stakers (false).\",\"poolId\":\"The unique identifier of the pool to which the reward is being added.\",\"rewardAmount\":\"The amount of reward tokens being added.\",\"rewardToken\":\"The ERC20 token used as the reward.\"},\"returns\":{\"rewardId\":\"The unique identifier for the newly added reward within the pool.\"}},\"claimRewards(uint256[],uint256[][],address)\":{\"custom:error\":\"RewardTransferFailed Reverts if the transfer of rewards to the recipient fails.RewardAlreadyClaimed Reverts if the reward has already been claimed by the caller.RewardIsNotYetAvailableForClaim Reverts if the reward is not yet available for claim               based on the block number.RewardNotFoundInPool Reverts if the specified reward ID does not exist within the given pool.StakerDoesNotHaveStakesInPool Reverts if the caller does not have any stakes in the specified pool.RewardIsEmpty Reverts if the calculated reward amount is zero, indicating there's no reward to claim.\",\"details\":\"This function iterates over an array of pool IDs and their corresponding reward IDs      to calculate and claim rewards for the caller. It supports both ERC20 and potentially      other types of rewards, aggregating reward amounts and performing token transfers      in a secure manner to avoid reentrancy issues. The function updates the claimed amounts      internally to prevent double claiming. Emits a `RewardClaimed` event for each successful reward claim.\",\"params\":{\"poolIds\":\"An array of pool IDs from which the caller wishes to claim rewards.\",\"recipient\":\"The address to which the claimed rewards will be transferred.\",\"rewardIds\":\"A two-dimensional array corresponding to the `poolIds`, containing arrays of reward IDs                  to be claimed from each pool.\"},\"returns\":{\"amounts\":\"A two-dimensional array of amounts corresponding to the claimed rewards for each pool.                 This array mirrors the structure of `poolIds` and `rewardIds`.\",\"tokens\":\"A two-dimensional array of tokens corresponding to the claimed rewards for each pool.                This array mirrors the structure of `poolIds` and `rewardIds`.\"}},\"editPool(uint256,bytes32)\":{\"custom:error\":\"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing               pool, indicated by a `launchBlock` of zero.InvalidMetadata Reverts if the new metadata is either empty or matches the current               metadata of the pool, indicating no change.OnlyRewinderHasAccessToEditMetadata Reverts if the caller is not the rewarder of the               pool or if the rewarder's address is zero. This ensures that only the designated rewarder               can edit pool metadata.\",\"details\":\"This function allows the pool's rewarder to update the pool's metadata. It emits a `PoolEdited`      event upon success. The function is protected against reentrancy attacks. It requires the caller      to be the rewarder of the pool with a non-zero address and does not allow setting the metadata      to its current value or to an empty value (bytes32(0)). This restriction ensures that changes      are meaningful and prevent accidental erasure of metadata.\",\"params\":{\"metadata\":\"The new metadata for the pool, encoded in bytes32. This is expected to be                 an IPFS CID representing a JSON object that contains additional information about                 the pool. The function rejects empty metadata.\",\"poolId\":\"The unique identifier of the pool whose metadata is to be edited.\"}},\"launchPool(address,address,address,address,bytes32)\":{\"custom:error\":\"InvalidERC721Token Reverts if the provided ERC721 address is not a valid ERC721 token.InvalidStakeToken Reverts if both stakeERC20 and stakeERC721 addresses are zero,               indicating no staking token was provided.InvalidMetadata Reverts if the provided metadata is empty (bytes32(0)),               indicating that necessary pool information is missing.\",\"details\":\"This function emits a `PoolLaunched` event upon successful creation of a pool.      It uses a non-reentrant modifier to prevent reentrancy attacks during execution.      The function validates the staking tokens and metadata before creating the pool.      At least one staking token (ERC20 or ERC721) must be specified.      `metadata` is expected to be an IPFS CID encoded in bytes32, representing a JSON object      associated with this pool.\",\"params\":{\"metadata\":\"Arbitrary data to be associated with this pool, encoded in bytes32. This is expected                 to be an IPFS CID representing a JSON object that contains additional information                 about the pool.\",\"rewardToken\":\"The ERC20 token address that will be used as a reward in this pool. If `address(0)`,                    rewards can be in any token, allowing for flexible reward schemes.\",\"rewarder\":\"The address responsible for providing rewards to the pool. If `address(0)`,                 any user can add rewards to the pool, enabling a decentralized reward mechanism.\",\"stakeERC20\":\"The ERC20 token address that will be staked in this pool. If `address(0)`,                   indicates that no ERC20 staking is required, but `stakeERC721` must not be `address(0)`.\",\"stakeERC721\":\"The ERC721 token address that will be staked in this pool. If `address(0)`,                    indicates that no ERC721 staking is required, but `stakeERC20` must not be `address(0)`.\"},\"returns\":{\"poolId\":\"The unique identifier of the newly created staking pool.\"}},\"stake(uint256,uint256,uint256)\":{\"custom:error\":\"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.InvalidAmount Reverts if both `amount` and `id` are zero or less,               indicating that no valid stake has been specified.StakeTransferFailed Reverts if the transfer of ERC20 tokens from the staker to the contract fails.\",\"details\":\"This function enables staking of either ERC20 or ERC721 tokens based on the parameters provided.      It is protected against reentrancy attacks. The function calculates the new stake ID as the length      of the staker's existing stakes in the pool, adjusts the pool's total staked tokens accordingly,      and records the new stake. It requires that the pool exists and that the staked amount (for ERC20)      or the staked token ID (for ERC721) is valid. Transfers the staked tokens from the caller to this      contract. Emits a `StakeCreated` event upon success.\",\"params\":{\"amount\":\"The amount of ERC20 tokens to stake. This parameter is ignored if `id` is specified for               an ERC721 token stake. Must be greater than zero for ERC20 staking.\",\"id\":\"The ID of the ERC721 token to stake. This parameter is ignored if `amount` is specified for           an ERC20 token stake. Must be a valid token ID for ERC721 staking.\",\"poolId\":\"The unique identifier of the pool in which to stake tokens.\"},\"returns\":{\"stakeId\":\"The unique identifier for the newly created stake within the pool.\"}},\"unstake(uint256,uint256[])\":{\"custom:error\":\"UnstakeTransferFailed Reverts if the transfer of staked ERC20 tokens back to the staker fails.PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.PoolDoesNotHaveStakes Reverts if the staker does not have any stakes in the specified pool or if the               provided stake IDs array is empty.StakerDoesNotHaveStakesInPool Reverts if the staker does not have any active stakes within the pool               corresponding to the provided stake IDs.\",\"details\":\"This function facilitates the withdrawal of staked assets from the pool by a user.      It calculates the total amount of ERC20 tokens and the count of ERC721 tokens to be      unstaked based on the provided stake IDs, then performs the asset transfer back to      the staker. It utilizes an internal `_unstake` helper function to process the unstaking      logic. The function ensures the pool exists and that the staker has stakes to withdraw.      It reverts on failures related to token transfers or invalid operations. Emits a      `StakeWithdrawn` event upon successful unstaking.\",\"params\":{\"poolId\":\"The unique identifier of the pool from which the staker wishes to withdraw their stakes.\",\"stakeIds\":\"An array of stake identifiers that the staker wishes to withdraw.\"},\"returns\":{\"amountERC20\":\"The total amount of ERC20 tokens being unstaked.\",\"idsERC721\":\"An array containing the IDs of the ERC721 tokens being unstaked.\"}}},\"title\":\"Staqe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addReward(uint256,address,uint256,uint256,bool)\":{\"notice\":\"Adds a reward to a specified pool, which can be claimed by stakers after a         set number of blocks.\"},\"claimRewards(uint256[],uint256[][],address)\":{\"notice\":\"Claims rewards for the caller across multiple pools and specific reward IDs,         transferring the rewards to a specified recipient.\"},\"editPool(uint256,bytes32)\":{\"notice\":\"Edits the metadata of an existing staking pool.\"},\"launchPool(address,address,address,address,bytes32)\":{\"notice\":\"Launches a new staking pool with specified configurations.\"},\"stake(uint256,uint256,uint256)\":{\"notice\":\"Allows users to stake ERC20 tokens or ERC721 tokens into a specified pool.\"},\"unstake(uint256,uint256[])\":{\"notice\":\"Allows a staker to unstake their tokens (ERC20 or ERC721) from a specified pool.\"}},\"notice\":\"_                     _       _             __   ___| |_ __ _  __ _  ___  (_)_ __ | |_ ___ _ __ / _| __ _  ___ ___  / __| __/ _` |/ _` |/ _ \\\\ | | '_ \\\\| __/ _ \\\\ '__| |_ / _` |/ __/ _ \\\\  \\\\__ \\\\ || (_| | (_| |  __/ | | | | | ||  __/ |  |  _| (_| | (_|  __/  |___/\\\\__\\\\__,_|\\\\__, |\\\\___| |_|_| |_|\\\\__\\\\___|_|  |_|  \\\\__,_|\\\\___\\\\___|                   |_|\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStaqe.sol\":\"IStaqe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@staqeprotocol/v1-core/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IStaqe.sol\":{\"keccak256\":\"0x6c9f6643043ca50f7e786d4998f8da7bcac04fff228beff9483ab9fd7c9bd54f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b6efb57797e6fd7cda347e5cf1e7d6057af59c5a9c29c46e09e85ce1473ca7ab\",\"dweb:/ipfs/QmSFrxjXCbyBmBW4yhk4CG8yF8Gzu7fzu5DiEPTEwwSw9R\"]},\"contracts/interfaces/IStaqeErrors.sol\":{\"keccak256\":\"0x412008d37eef8b26c3c3a76bd38e902513a37d5b4ea51e8abce70884cf3a5222\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bf2c341f68e81e4aec8de2cf93bf006c06bd3a3f36958c9d3417bbc7102cb2af\",\"dweb:/ipfs/QmWdDbg24MahmiqeUuqVN9jt3E8LcVjeTmuSnSduGkgLxs\"]},\"contracts/interfaces/IStaqeEvents.sol\":{\"keccak256\":\"0xc5ebfde89076399b1a918430bbfbd552ff9774cdd74f6583e58243897950960a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0a3dee597c769fbd883debee5335cbd1d23068d0db1f86118e99e150c0455636\",\"dweb:/ipfs/QmWRkkjrRnffCavifr83J3jvixS4hLKsPCyQwSS5H889dj\"]},\"contracts/interfaces/IStaqeStructs.sol\":{\"keccak256\":\"0xe5ee4bb1b487b99d4ded52452549e592f533dd95343578f07f854cea015462c5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a70f8f039a4dfa526b042a16e22359f221c0daa2e9c8919579799b805857217d\",\"dweb:/ipfs/QmYPmtrapthRQFr3Koh7hc2sWbUym5EbzihMvssC4eLbBW\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidAmountOrId"},{"inputs":[],"type":"error","name":"InvalidERC721Token"},{"inputs":[],"type":"error","name":"InvalidMetadata"},{"inputs":[],"type":"error","name":"InvalidRewardToken"},{"inputs":[],"type":"error","name":"InvalidStakeToken"},{"inputs":[],"type":"error","name":"OnlyAvailableToStakersInGenesis"},{"inputs":[],"type":"error","name":"OnlyRewinderHasAccessToAddRewards"},{"inputs":[],"type":"error","name":"OnlyRewinderHasAccessToEditMetadata"},{"inputs":[],"type":"error","name":"PoolDoesNotExist"},{"inputs":[],"type":"error","name":"PoolDoesNotHaveStakes"},{"inputs":[],"type":"error","name":"RewardAlreadyClaimed"},{"inputs":[],"type":"error","name":"RewardIsEmpty"},{"inputs":[],"type":"error","name":"RewardIsNotYetAvailableForClaim"},{"inputs":[],"type":"error","name":"RewardNotFoundInPool"},{"inputs":[],"type":"error","name":"RewardTransferFailed"},{"inputs":[],"type":"error","name":"StakeTransferFailed"},{"inputs":[],"type":"error","name":"StakerDoesNotHaveStakesInPool"},{"inputs":[],"type":"error","name":"UnstakeOnNextBlockAndGetReward"},{"inputs":[],"type":"error","name":"UnstakeTransferFailed"},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"bytes32","name":"metadata","type":"bytes32","indexed":false}],"type":"event","name":"PoolEdited","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"stakeERC20","type":"address","indexed":true},{"internalType":"contract IERC721","name":"stakeERC721","type":"address","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":false},{"internalType":"address","name":"rewarder","type":"address","indexed":false},{"internalType":"bytes32","name":"metadata","type":"bytes32","indexed":false}],"type":"event","name":"PoolLaunched","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":true},{"internalType":"uint256","name":"rewardAmount","type":"uint256","indexed":false},{"internalType":"uint256","name":"totalStakedERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"totalStakedERC721","type":"uint256","indexed":false},{"internalType":"bool","name":"isForERC721Stakers","type":"bool","indexed":false},{"internalType":"uint256","name":"claimAfterBlock","type":"uint256","indexed":false}],"type":"event","name":"RewardAdded","anonymous":false},{"inputs":[{"internalType":"address","name":"claimant","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":false},{"internalType":"uint256","name":"rewardAmount","type":"uint256","indexed":false}],"type":"event","name":"RewardClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeAmountERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"stakeAmountERC721","type":"uint256","indexed":false}],"type":"event","name":"StakeCreated","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeAmountERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"stakeAmountERC721","type":"uint256","indexed":false}],"type":"event","name":"StakeWithdrawn","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"uint256","name":"claimAfterBlocks","type":"uint256"},{"internalType":"bool","name":"isForERC721Stakers","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"addReward","outputs":[{"internalType":"uint256","name":"rewardId","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"poolIds","type":"uint256[]"},{"internalType":"uint256[][]","name":"rewardIds","type":"uint256[][]"},{"internalType":"address","name":"recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"claimRewards","outputs":[{"internalType":"contract IERC20[][]","name":"tokens","type":"address[][]"},{"internalType":"uint256[][]","name":"amounts","type":"uint256[][]"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"bytes32","name":"metadata","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"editPool"},{"inputs":[{"internalType":"contract IERC20","name":"stakeERC20","type":"address"},{"internalType":"contract IERC721","name":"stakeERC721","type":"address"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"address","name":"rewarder","type":"address"},{"internalType":"bytes32","name":"metadata","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"launchPool","outputs":[{"internalType":"uint256","name":"poolId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"stake","outputs":[{"internalType":"uint256","name":"stakeId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256[]","name":"stakeIds","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"unstake","outputs":[{"internalType":"uint256","name":"amountERC20","type":"uint256"},{"internalType":"uint256[]","name":"idsERC721","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"addReward(uint256,address,uint256,uint256,bool)":{"custom:error":"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.InvalidRewardToken Reverts if the reward token address is zero.RewardIsEmpty Reverts if the reward amount is zero or less.OnlyRewinderHasAccessToAddRewards Reverts if the caller is not the designated               rewarder for the pool or if the pool does not have a designated rewarder.PoolDoesNotHaveStakes Reverts if the pool has no eligible stakes for the type               of stakers specified by `isForERC721Stakers`.RewardTransferFailed Reverts if the transfer of reward tokens from the caller to               the contract fails.","details":"This function allows adding rewards to a pool, with the option to specify whether      the reward is for ERC721 stakers or ERC20 stakers within the pool. It validates      the existence of the pool, the validity of the reward token, and the reward amount.      The function also checks if the caller is authorized as the rewarder for the pool and ensures      there are eligible stakers in the pool. The reward is recorded, and the reward tokens      are transferred from the caller to this contract. Emits a `RewardAdded` event upon successful      addition of the reward.","params":{"claimAfterBlocks":"The number of blocks after which the reward can be claimed.","isForERC721Stakers":"A boolean flag indicating whether the reward is designated                           for ERC721 stakers (true) or ERC20 stakers (false).","poolId":"The unique identifier of the pool to which the reward is being added.","rewardAmount":"The amount of reward tokens being added.","rewardToken":"The ERC20 token used as the reward."},"returns":{"rewardId":"The unique identifier for the newly added reward within the pool."}},"claimRewards(uint256[],uint256[][],address)":{"custom:error":"RewardTransferFailed Reverts if the transfer of rewards to the recipient fails.RewardAlreadyClaimed Reverts if the reward has already been claimed by the caller.RewardIsNotYetAvailableForClaim Reverts if the reward is not yet available for claim               based on the block number.RewardNotFoundInPool Reverts if the specified reward ID does not exist within the given pool.StakerDoesNotHaveStakesInPool Reverts if the caller does not have any stakes in the specified pool.RewardIsEmpty Reverts if the calculated reward amount is zero, indicating there's no reward to claim.","details":"This function iterates over an array of pool IDs and their corresponding reward IDs      to calculate and claim rewards for the caller. It supports both ERC20 and potentially      other types of rewards, aggregating reward amounts and performing token transfers      in a secure manner to avoid reentrancy issues. The function updates the claimed amounts      internally to prevent double claiming. Emits a `RewardClaimed` event for each successful reward claim.","params":{"poolIds":"An array of pool IDs from which the caller wishes to claim rewards.","recipient":"The address to which the claimed rewards will be transferred.","rewardIds":"A two-dimensional array corresponding to the `poolIds`, containing arrays of reward IDs                  to be claimed from each pool."},"returns":{"amounts":"A two-dimensional array of amounts corresponding to the claimed rewards for each pool.                 This array mirrors the structure of `poolIds` and `rewardIds`.","tokens":"A two-dimensional array of tokens corresponding to the claimed rewards for each pool.                This array mirrors the structure of `poolIds` and `rewardIds`."}},"editPool(uint256,bytes32)":{"custom:error":"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing               pool, indicated by a `launchBlock` of zero.InvalidMetadata Reverts if the new metadata is either empty or matches the current               metadata of the pool, indicating no change.OnlyRewinderHasAccessToEditMetadata Reverts if the caller is not the rewarder of the               pool or if the rewarder's address is zero. This ensures that only the designated rewarder               can edit pool metadata.","details":"This function allows the pool's rewarder to update the pool's metadata. It emits a `PoolEdited`      event upon success. The function is protected against reentrancy attacks. It requires the caller      to be the rewarder of the pool with a non-zero address and does not allow setting the metadata      to its current value or to an empty value (bytes32(0)). This restriction ensures that changes      are meaningful and prevent accidental erasure of metadata.","params":{"metadata":"The new metadata for the pool, encoded in bytes32. This is expected to be                 an IPFS CID representing a JSON object that contains additional information about                 the pool. The function rejects empty metadata.","poolId":"The unique identifier of the pool whose metadata is to be edited."}},"launchPool(address,address,address,address,bytes32)":{"custom:error":"InvalidERC721Token Reverts if the provided ERC721 address is not a valid ERC721 token.InvalidStakeToken Reverts if both stakeERC20 and stakeERC721 addresses are zero,               indicating no staking token was provided.InvalidMetadata Reverts if the provided metadata is empty (bytes32(0)),               indicating that necessary pool information is missing.","details":"This function emits a `PoolLaunched` event upon successful creation of a pool.      It uses a non-reentrant modifier to prevent reentrancy attacks during execution.      The function validates the staking tokens and metadata before creating the pool.      At least one staking token (ERC20 or ERC721) must be specified.      `metadata` is expected to be an IPFS CID encoded in bytes32, representing a JSON object      associated with this pool.","params":{"metadata":"Arbitrary data to be associated with this pool, encoded in bytes32. This is expected                 to be an IPFS CID representing a JSON object that contains additional information                 about the pool.","rewardToken":"The ERC20 token address that will be used as a reward in this pool. If `address(0)`,                    rewards can be in any token, allowing for flexible reward schemes.","rewarder":"The address responsible for providing rewards to the pool. If `address(0)`,                 any user can add rewards to the pool, enabling a decentralized reward mechanism.","stakeERC20":"The ERC20 token address that will be staked in this pool. If `address(0)`,                   indicates that no ERC20 staking is required, but `stakeERC721` must not be `address(0)`.","stakeERC721":"The ERC721 token address that will be staked in this pool. If `address(0)`,                    indicates that no ERC721 staking is required, but `stakeERC20` must not be `address(0)`."},"returns":{"poolId":"The unique identifier of the newly created staking pool."}},"stake(uint256,uint256,uint256)":{"custom:error":"PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.InvalidAmount Reverts if both `amount` and `id` are zero or less,               indicating that no valid stake has been specified.StakeTransferFailed Reverts if the transfer of ERC20 tokens from the staker to the contract fails.","details":"This function enables staking of either ERC20 or ERC721 tokens based on the parameters provided.      It is protected against reentrancy attacks. The function calculates the new stake ID as the length      of the staker's existing stakes in the pool, adjusts the pool's total staked tokens accordingly,      and records the new stake. It requires that the pool exists and that the staked amount (for ERC20)      or the staked token ID (for ERC721) is valid. Transfers the staked tokens from the caller to this      contract. Emits a `StakeCreated` event upon success.","params":{"amount":"The amount of ERC20 tokens to stake. This parameter is ignored if `id` is specified for               an ERC721 token stake. Must be greater than zero for ERC20 staking.","id":"The ID of the ERC721 token to stake. This parameter is ignored if `amount` is specified for           an ERC20 token stake. Must be a valid token ID for ERC721 staking.","poolId":"The unique identifier of the pool in which to stake tokens."},"returns":{"stakeId":"The unique identifier for the newly created stake within the pool."}},"unstake(uint256,uint256[])":{"custom:error":"UnstakeTransferFailed Reverts if the transfer of staked ERC20 tokens back to the staker fails.PoolDoesNotExist Reverts if the specified pool ID does not correspond to an existing pool.PoolDoesNotHaveStakes Reverts if the staker does not have any stakes in the specified pool or if the               provided stake IDs array is empty.StakerDoesNotHaveStakesInPool Reverts if the staker does not have any active stakes within the pool               corresponding to the provided stake IDs.","details":"This function facilitates the withdrawal of staked assets from the pool by a user.      It calculates the total amount of ERC20 tokens and the count of ERC721 tokens to be      unstaked based on the provided stake IDs, then performs the asset transfer back to      the staker. It utilizes an internal `_unstake` helper function to process the unstaking      logic. The function ensures the pool exists and that the staker has stakes to withdraw.      It reverts on failures related to token transfers or invalid operations. Emits a      `StakeWithdrawn` event upon successful unstaking.","params":{"poolId":"The unique identifier of the pool from which the staker wishes to withdraw their stakes.","stakeIds":"An array of stake identifiers that the staker wishes to withdraw."},"returns":{"amountERC20":"The total amount of ERC20 tokens being unstaked.","idsERC721":"An array containing the IDs of the ERC721 tokens being unstaked."}}},"version":1},"userdoc":{"kind":"user","methods":{"addReward(uint256,address,uint256,uint256,bool)":{"notice":"Adds a reward to a specified pool, which can be claimed by stakers after a         set number of blocks."},"claimRewards(uint256[],uint256[][],address)":{"notice":"Claims rewards for the caller across multiple pools and specific reward IDs,         transferring the rewards to a specified recipient."},"editPool(uint256,bytes32)":{"notice":"Edits the metadata of an existing staking pool."},"launchPool(address,address,address,address,bytes32)":{"notice":"Launches a new staking pool with specified configurations."},"stake(uint256,uint256,uint256)":{"notice":"Allows users to stake ERC20 tokens or ERC721 tokens into a specified pool."},"unstake(uint256,uint256[])":{"notice":"Allows a staker to unstake their tokens (ERC20 or ERC721) from a specified pool."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@staqeprotocol/v1-core/contracts/=contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IStaqe.sol":"IStaqe"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/interfaces/IStaqe.sol":{"keccak256":"0x6c9f6643043ca50f7e786d4998f8da7bcac04fff228beff9483ab9fd7c9bd54f","urls":["bzz-raw://b6efb57797e6fd7cda347e5cf1e7d6057af59c5a9c29c46e09e85ce1473ca7ab","dweb:/ipfs/QmSFrxjXCbyBmBW4yhk4CG8yF8Gzu7fzu5DiEPTEwwSw9R"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeErrors.sol":{"keccak256":"0x412008d37eef8b26c3c3a76bd38e902513a37d5b4ea51e8abce70884cf3a5222","urls":["bzz-raw://bf2c341f68e81e4aec8de2cf93bf006c06bd3a3f36958c9d3417bbc7102cb2af","dweb:/ipfs/QmWdDbg24MahmiqeUuqVN9jt3E8LcVjeTmuSnSduGkgLxs"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeEvents.sol":{"keccak256":"0xc5ebfde89076399b1a918430bbfbd552ff9774cdd74f6583e58243897950960a","urls":["bzz-raw://0a3dee597c769fbd883debee5335cbd1d23068d0db1f86118e99e150c0455636","dweb:/ipfs/QmWRkkjrRnffCavifr83J3jvixS4hLKsPCyQwSS5H889dj"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeStructs.sol":{"keccak256":"0xe5ee4bb1b487b99d4ded52452549e592f533dd95343578f07f854cea015462c5","urls":["bzz-raw://a70f8f039a4dfa526b042a16e22359f221c0daa2e9c8919579799b805857217d","dweb:/ipfs/QmYPmtrapthRQFr3Koh7hc2sWbUym5EbzihMvssC4eLbBW"],"license":"BUSL-1.1"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4","urls":["bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7","dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","urls":["bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df","dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"],"license":"MIT"}},"version":1},"id":3}