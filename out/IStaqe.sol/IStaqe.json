{"abi":[{"type":"function","name":"addReward","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","internalType":"uint256"},{"name":"claimAfterBlocks","type":"uint256","internalType":"uint256"},{"name":"isForERC721Stakers","type":"bool","internalType":"bool"}],"outputs":[{"name":"rewardId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimRewards","inputs":[{"name":"poolIds","type":"uint256[]","internalType":"uint256[]"},{"name":"rewardIds","type":"uint256[][]","internalType":"uint256[][]"},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[{"name":"tokens","type":"address[][]","internalType":"contract IERC20[][]"},{"name":"amounts","type":"uint256[][]","internalType":"uint256[][]"}],"stateMutability":"nonpayable"},{"type":"function","name":"editPool","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"metadata","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"launchPool","inputs":[{"name":"stakeERC20","type":"address","internalType":"contract IERC20"},{"name":"stakeERC721","type":"address","internalType":"contract IERC721"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"rewarder","type":"address","internalType":"address"},{"name":"metadata","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"poolId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"stake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"stakeId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"unstake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"stakeIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"amountERC20","type":"uint256","internalType":"uint256"},{"name":"idsERC721","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"event","name":"PoolEdited","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"metadata","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"PoolLaunched","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeERC20","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"stakeERC721","type":"address","indexed":true,"internalType":"contract IERC721"},{"name":"rewardToken","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"rewarder","type":"address","indexed":false,"internalType":"address"},{"name":"metadata","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RewardAdded","inputs":[{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardToken","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalStakedERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalStakedERC721","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isForERC721Stakers","type":"bool","indexed":false,"internalType":"bool"},{"name":"claimAfterBlock","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardClaimed","inputs":[{"name":"claimant","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardToken","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeCreated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeAmountERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"stakeAmountERC721","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeWithdrawn","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeAmountERC20","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"stakeAmountERC721","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InvalidAmountOrId","inputs":[]},{"type":"error","name":"InvalidERC721Token","inputs":[]},{"type":"error","name":"InvalidMetadata","inputs":[]},{"type":"error","name":"InvalidRewardToken","inputs":[]},{"type":"error","name":"InvalidStakeToken","inputs":[]},{"type":"error","name":"OnlyAvailableToStakersInGenesis","inputs":[]},{"type":"error","name":"OnlyRewinderHasAccessToAddRewards","inputs":[]},{"type":"error","name":"OnlyRewinderHasAccessToEditMetadata","inputs":[]},{"type":"error","name":"PoolDoesNotExist","inputs":[]},{"type":"error","name":"PoolDoesNotHaveStakes","inputs":[]},{"type":"error","name":"RewardAlreadyClaimed","inputs":[]},{"type":"error","name":"RewardIsEmpty","inputs":[]},{"type":"error","name":"RewardIsNotYetAvailableForClaim","inputs":[]},{"type":"error","name":"RewardNotFoundInPool","inputs":[]},{"type":"error","name":"RewardTransferFailed","inputs":[]},{"type":"error","name":"StakeTransferFailed","inputs":[]},{"type":"error","name":"StakerDoesNotHaveStakesInPool","inputs":[]},{"type":"error","name":"UnstakeOnNextBlockAndGetReward","inputs":[]},{"type":"error","name":"UnstakeTransferFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addReward(uint256,address,uint256,uint256,bool)":"7ebfee3e","claimRewards(uint256[],uint256[][],address)":"99a47faa","editPool(uint256,bytes32)":"e964a1a5","launchPool(address,address,address,address,bytes32)":"ba2b6651","stake(uint256,uint256,uint256)":"a638f2e2","unstake(uint256,uint256[])":"395de242"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAmountOrId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAvailableToStakersInGenesis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewinderHasAccessToAddRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewinderHasAccessToEditMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotHaveStakes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsNotYetAvailableForClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardNotFoundInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakerDoesNotHaveStakesInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeOnNextBlockAndGetReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"PoolEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"stakeERC20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"stakeERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"PoolLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedERC721\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isForERC721Stakers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAfterBlock\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC721\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountERC721\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAfterBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForERC721Stakers\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"rewardIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"editPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeERC20\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"stakeERC721\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"launchPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountERC20\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsERC721\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements a flexible staking system where users can stake ERC20 or ERC721 tokens in various pools to earn rewards in the form of ERC20 tokens. The contract supports the creation and  management of multiple staking pools, each with its own configuration for staked tokens and rewards. Users can stake and unstake their tokens at any time, subject to the rules of each pool, and claim their earned rewards after a specified number of blocks. The contract extends OpenZeppelin's ReentrancyGuard to prevent reentrant calls, and Context to provide information about the transaction's context. It implements the IStaqe interface, which defines the core functionality for staking, unstaking, reward management, and pool configuration. Key Features: - Create and manage multiple staking pools with different configurations. - Stake ERC20 or ERC721 tokens to participate in earning rewards. - Configure rewards in ERC20 tokens for each staking pool. - Claim rewards after a specified number of blocks, enforcing a minimum staking period. - Flexible design allowing for various staking and reward strategies. The contract is designed to be versatile and adaptable, supporting a wide range of staking and reward mechanisms to accommodate different types of staking assets and reward distributions.\",\"kind\":\"dev\",\"methods\":{\"addReward(uint256,address,uint256,uint256,bool)\":{\"custom:error\":\"PoolDoesNotExist Indicates that the specified pool does not exist.OnlyRewinderHasAccessToAddRewards Indicates that only the designated  rewarder of the pool can add rewards.InvalidRewardToken Indicates that the reward token address is invalid.RewardIsEmpty Indicates that the reward amount is zero or insufficient.PoolDoesNotHaveStakes Indicates that the pool has no active stakes, and  thus adding a reward is not meaningful.\",\"details\":\"Adds a reward to a specified pool, enabling stakers to earn additional tokens. This function allows the pool's rewarder to allocate a new reward in the form of ERC20  tokens, which can be claimed by stakers after a certain number of blocks. Emits a {IStaqeEvents-RewardAdded} event when the reward is successfully added to the pool. Requirements: - The caller must be the rewarder of the pool. - The pool specified by `poolId` must exist and have active stakes. - `rewardToken` must be a valid ERC20 token address. - `rewardAmount` must be greater than zero and should be meaningful considering the    pool's staking context. - `claimAfterBlocks` specifies the number of blocks to wait before the reward can be    claimed, enforcing a minimum staking period.\",\"params\":{\"claimAfterBlocks\":\"The number of blocks to wait before the reward becomes claimable.\",\"isForERC721Stakers\":\"A boolean indicating whether the reward is for ERC721 stakers  (true) or ERC20 stakers (false).\",\"poolId\":\"The ID of the pool to which the reward is being added.\",\"rewardAmount\":\"The amount of reward tokens to be distributed.\",\"rewardToken\":\"The ERC20 token address to be used for the reward.\"},\"returns\":{\"rewardId\":\"The ID of the newly added reward in the pool.\"}},\"claimRewards(uint256[],uint256[][],address)\":{\"custom:error\":\"PoolDoesNotExist Indicates that one of the specified pools does not exist.RewardNotFoundInPool Indicates that one of the specified rewards does not  exist in the corresponding pool.RewardAlreadyClaimed Indicates that the user has already claimed the  specified reward.RewardIsNotYetAvailableForClaim Indicates that the reward is not yet  available for claiming, typically because the claimAfterBlocks period has not yet passed.RewardIsEmpty Indicates that there is no reward available to be claimed,  possibly because the user does not have a qualifying stake.RewardTransferFailed Indicates that the transfer of the reward tokens to  the recipient address failed.\",\"details\":\"Allows users to claim their pending rewards for a specific pool or multiple pools. This function calculates the claimable rewards based on the user's stakes and the pool's  reward configuration, then transfers the appropriate amount of reward tokens to the user. Emits a {IStaqeEvents-RewardClaimed} event for each reward that is successfully claimed. Requirements: - The caller must have earned rewards in the specified pool(s) that are ready to be claimed. - `poolIds` and `rewardIds` arrays must correspond to each other, specifying which rewards  to claim from which pools. - The `recipient` address must be valid and can be the caller or another address specified  by the caller.\",\"params\":{\"poolIds\":\"An array of pool IDs from which the user is claiming rewards.\",\"recipient\":\"The address that will receive the claimed rewards. It can be the caller's  address or another address specified by the caller.\",\"rewardIds\":\"A two-dimensional array of reward IDs that the user is claiming,  corresponding to each pool ID in `poolIds`.\"},\"returns\":{\"amounts\":\"A two-dimensional array of amounts for the claimed rewards, corresponding  to each claimed reward ID in `rewardIds`.\",\"tokens\":\"A two-dimensional array of ERC20 token addresses for the claimed rewards,  corresponding to each claimed reward ID in `rewardIds`.\"}},\"editPool(uint256,bytes32)\":{\"custom:error\":\"PoolDoesNotExist Indicates that the specified pool does not exist.OnlyRewinderHasAccessToEditMetadata Indicates that only the rewarder  associated with the pool can edit its metadata.InvalidMetadata Indicates that the provided metadata is invalid (e.g.,  empty or the same as the current metadata).\",\"details\":\"Edits the metadata of an existing staking pool. This function allows the pool's rewarder to update the pool's metadata post-creation. Only the rewarder address associated with the pool has the authority to make this change. Emits a {IStaqeEvents-PoolEdited} event when the metadata is successfully updated. Requirements: - The pool specified by `poolId` must exist. - The caller must be the rewarder of the pool. - The new `metadata` must be different from the existing metadata and cannot be empty.\",\"params\":{\"metadata\":\"The new metadata for the pool, encoded as bytes32. It must be different  from the current metadata and cannot be the zero bytes.\",\"poolId\":\"The ID of the pool whose metadata is being updated.\"}},\"launchPool(address,address,address,address,bytes32)\":{\"custom:error\":\"InvalidStakeToken Indicates that the provided ERC20 or ERC721 token  address is invalid.InvalidRewardToken Indicates that the provided reward token address is  invalid.OnlyAvailableToStakersInGenesis Indicates that the function is only  callable by users who are stakers in the genesis pool.\",\"details\":\"Launches a new staking pool with specified parameters. This function allows the contract caller to create a new staking pool where users can  stake specific ERC20 or ERC721 tokens to earn rewards. Emits a {IStaqeEvents-PoolLaunched} event. Requirements: - The caller must have certain privileges, typically being an admin or contract owner. - `stakeERC20` and `stakeERC721` cannot both be zero addresses; at least one valid    token address must be provided. - `rewardToken` must be a valid ERC20 token address that will be used for distributing    rewards. - `rewarder` is the address authorized to manage rewards for the pool, often the same    as the caller or a dedicated rewards manager. - `metadata` is field that can be used to store additional information    about the pool, encoded in bytes32.\",\"params\":{\"metadata\":\"Metadata providing additional information about the pool,  encoded as bytes32.\",\"rewardToken\":\"The ERC20 token address that will be used to distribute rewards to  stakers.\",\"rewarder\":\"The address with the authority to manage and distribute rewards for  this pool.\",\"stakeERC20\":\"The ERC20 token address that users will stake in this pool. Can be  the zero address if the pool is for ERC721 staking.\",\"stakeERC721\":\"The ERC721 token address that users will stake in this pool. Can be  the zero address if the pool is for ERC20 staking.\"},\"returns\":{\"poolId\":\"The ID of the newly created staking pool, which can be used to interact  with the pool in future transactions.\"}},\"stake(uint256,uint256,uint256)\":{\"custom:error\":\"PoolDoesNotExist Indicates that the specified pool does not exist.InvalidAmountOrId Indicates that both `amount` and `id` are zero, or their  values are not consistent with the token type expected by the pool.StakeTransferFailed Indicates that the transfer of tokens to the contract  failed, which could be due to insufficient balance or allowance.\",\"details\":\"Allows a user to stake ERC20 or ERC721 tokens into a specified pool. This function records the user's stake in the pool, updating the pool's total staked  amounts and the user's staking details. Users can stake either ERC20 or ERC721 tokens,  but not both at the same time. Emits a {IStaqeEvents-StakeCreated} event when the stake is successfully created. Requirements: - The pool specified by `poolId` must exist. - At least one of `amount` or `id` must be non-zero, corresponding to the type of token  being staked (ERC20 or ERC721, respectively). - If staking ERC20 tokens, `amount` must be greater than zero and the user must have  enough balance and allowance. - If staking an ERC721 token, `id` must be a valid token ID owned by the caller.\",\"params\":{\"amount\":\"The amount of ERC20 tokens to stake. Should be zero if staking an ERC721 token.\",\"id\":\"The ID of the ERC721 token to stake. Should be zero if staking ERC20 tokens.\",\"poolId\":\"The ID of the pool where the tokens are being staked.\"},\"returns\":{\"stakeId\":\"The ID of the newly created stake record.\"}},\"unstake(uint256,uint256[])\":{\"custom:error\":\"PoolDoesNotExist Indicates that the specified pool does not exist.PoolDoesNotHaveStakes Indicates that the pool does not have any active  stakes, or the user does not have any active stakes in the pool.UnstakeTransferFailed Indicates that the transfer of staked tokens back to  the user failed.UnstakeOnNextBlockAndGetReward Suggests that the user should wait until the  next block to unstake in order to receive an upcoming reward.StakerDoesNotHaveStakesInPool Indicates that the staker does not have the  specified stakes in the pool.\",\"details\":\"Allows a user to unstake previously staked ERC20 or ERC721 tokens from a specified pool. This function enables users to retrieve their staked tokens, updating the pool's and user's  staking records accordingly. Emits a {IStaqeEvents-StakeWithdrawn} event when the tokens are successfully unstaked. Requirements: - The pool specified by `poolId` must exist. - The caller must have active stakes in the specified pool. - `stakeIds` array should contain valid stake IDs corresponding to the user's stakes. - Users can only unstake after the reward distribution for their stakes has been resolved.\",\"params\":{\"poolId\":\"The ID of the pool from which the tokens are being unstaked.\",\"stakeIds\":\"An array of stake IDs that the user wishes to unstake. These IDs must  correspond to the stakes the user has in the pool.\"},\"returns\":{\"amountERC20\":\"The total amount of ERC20 tokens returned to the user as a result of  the unstaking.\",\"idsERC721\":\"An array of the ERC721 token IDs returned to the user as a result of  the unstaking.\"}}},\"title\":\"Staqe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"_                     _       _             __   ___| |_ __ _  __ _  ___  (_)_ __ | |_ ___ _ __ / _| __ _  ___ ___  / __| __/ _` |/ _` |/ _ \\\\ | | '_ \\\\| __/ _ \\\\ '__| |_ / _` |/ __/ _ \\\\  \\\\__ \\\\ || (_| | (_| |  __/ | | | | | ||  __/ |  |  _| (_| | (_|  __/  |___/\\\\__\\\\__,_|\\\\__, |\\\\___| |_|_| |_|\\\\__\\\\___|_|  |_|  \\\\__,_|\\\\___\\\\___|                   |_|\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStaqe.sol\":\"IStaqe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@staqeprotocol/v1-core/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IStaqe.sol\":{\"keccak256\":\"0x3d440604e0470c16dc9b65ee99a23101f839b831f744f3cb24679fdc29f24ec4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://6887375377bbac8a7f4502870847ed7aec5acc695b27e49d8639b0be65cc80d9\",\"dweb:/ipfs/QmParkvAJQZ1R3YkDLqmn8PUtdrfn7wqnyAqGHPTv5dy61\"]},\"contracts/interfaces/IStaqeErrors.sol\":{\"keccak256\":\"0x412008d37eef8b26c3c3a76bd38e902513a37d5b4ea51e8abce70884cf3a5222\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bf2c341f68e81e4aec8de2cf93bf006c06bd3a3f36958c9d3417bbc7102cb2af\",\"dweb:/ipfs/QmWdDbg24MahmiqeUuqVN9jt3E8LcVjeTmuSnSduGkgLxs\"]},\"contracts/interfaces/IStaqeEvents.sol\":{\"keccak256\":\"0xc5ebfde89076399b1a918430bbfbd552ff9774cdd74f6583e58243897950960a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0a3dee597c769fbd883debee5335cbd1d23068d0db1f86118e99e150c0455636\",\"dweb:/ipfs/QmWRkkjrRnffCavifr83J3jvixS4hLKsPCyQwSS5H889dj\"]},\"contracts/interfaces/IStaqeStructs.sol\":{\"keccak256\":\"0xa8d4e5d77baf53db00b5ddb7431497de4a66976fee13cfcd05f6feabf1bfb2a5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://41b6270c14a011ceb0d0af2e01abcb2b999c9e882f83af19419ceb4ccc12f24c\",\"dweb:/ipfs/QmYfGEHohB7HPK5rr74GfQMkbmgJCtdhKe9XLfMUYW3TTu\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidAmountOrId"},{"inputs":[],"type":"error","name":"InvalidERC721Token"},{"inputs":[],"type":"error","name":"InvalidMetadata"},{"inputs":[],"type":"error","name":"InvalidRewardToken"},{"inputs":[],"type":"error","name":"InvalidStakeToken"},{"inputs":[],"type":"error","name":"OnlyAvailableToStakersInGenesis"},{"inputs":[],"type":"error","name":"OnlyRewinderHasAccessToAddRewards"},{"inputs":[],"type":"error","name":"OnlyRewinderHasAccessToEditMetadata"},{"inputs":[],"type":"error","name":"PoolDoesNotExist"},{"inputs":[],"type":"error","name":"PoolDoesNotHaveStakes"},{"inputs":[],"type":"error","name":"RewardAlreadyClaimed"},{"inputs":[],"type":"error","name":"RewardIsEmpty"},{"inputs":[],"type":"error","name":"RewardIsNotYetAvailableForClaim"},{"inputs":[],"type":"error","name":"RewardNotFoundInPool"},{"inputs":[],"type":"error","name":"RewardTransferFailed"},{"inputs":[],"type":"error","name":"StakeTransferFailed"},{"inputs":[],"type":"error","name":"StakerDoesNotHaveStakesInPool"},{"inputs":[],"type":"error","name":"UnstakeOnNextBlockAndGetReward"},{"inputs":[],"type":"error","name":"UnstakeTransferFailed"},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"bytes32","name":"metadata","type":"bytes32","indexed":false}],"type":"event","name":"PoolEdited","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"stakeERC20","type":"address","indexed":true},{"internalType":"contract IERC721","name":"stakeERC721","type":"address","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":false},{"internalType":"address","name":"rewarder","type":"address","indexed":false},{"internalType":"bytes32","name":"metadata","type":"bytes32","indexed":false}],"type":"event","name":"PoolLaunched","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":true},{"internalType":"uint256","name":"rewardAmount","type":"uint256","indexed":false},{"internalType":"uint256","name":"totalStakedERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"totalStakedERC721","type":"uint256","indexed":false},{"internalType":"bool","name":"isForERC721Stakers","type":"bool","indexed":false},{"internalType":"uint256","name":"claimAfterBlock","type":"uint256","indexed":false}],"type":"event","name":"RewardAdded","anonymous":false},{"inputs":[{"internalType":"address","name":"claimant","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardId","type":"uint256","indexed":true},{"internalType":"contract IERC20","name":"rewardToken","type":"address","indexed":false},{"internalType":"uint256","name":"rewardAmount","type":"uint256","indexed":false}],"type":"event","name":"RewardClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeAmountERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"stakeAmountERC721","type":"uint256","indexed":false}],"type":"event","name":"StakeCreated","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeAmountERC20","type":"uint256","indexed":false},{"internalType":"uint256","name":"stakeAmountERC721","type":"uint256","indexed":false}],"type":"event","name":"StakeWithdrawn","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"uint256","name":"claimAfterBlocks","type":"uint256"},{"internalType":"bool","name":"isForERC721Stakers","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"addReward","outputs":[{"internalType":"uint256","name":"rewardId","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"poolIds","type":"uint256[]"},{"internalType":"uint256[][]","name":"rewardIds","type":"uint256[][]"},{"internalType":"address","name":"recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"claimRewards","outputs":[{"internalType":"contract IERC20[][]","name":"tokens","type":"address[][]"},{"internalType":"uint256[][]","name":"amounts","type":"uint256[][]"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"bytes32","name":"metadata","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"editPool"},{"inputs":[{"internalType":"contract IERC20","name":"stakeERC20","type":"address"},{"internalType":"contract IERC721","name":"stakeERC721","type":"address"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"address","name":"rewarder","type":"address"},{"internalType":"bytes32","name":"metadata","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"launchPool","outputs":[{"internalType":"uint256","name":"poolId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"stake","outputs":[{"internalType":"uint256","name":"stakeId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256[]","name":"stakeIds","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"unstake","outputs":[{"internalType":"uint256","name":"amountERC20","type":"uint256"},{"internalType":"uint256[]","name":"idsERC721","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"addReward(uint256,address,uint256,uint256,bool)":{"custom:error":"PoolDoesNotExist Indicates that the specified pool does not exist.OnlyRewinderHasAccessToAddRewards Indicates that only the designated  rewarder of the pool can add rewards.InvalidRewardToken Indicates that the reward token address is invalid.RewardIsEmpty Indicates that the reward amount is zero or insufficient.PoolDoesNotHaveStakes Indicates that the pool has no active stakes, and  thus adding a reward is not meaningful.","details":"Adds a reward to a specified pool, enabling stakers to earn additional tokens. This function allows the pool's rewarder to allocate a new reward in the form of ERC20  tokens, which can be claimed by stakers after a certain number of blocks. Emits a {IStaqeEvents-RewardAdded} event when the reward is successfully added to the pool. Requirements: - The caller must be the rewarder of the pool. - The pool specified by `poolId` must exist and have active stakes. - `rewardToken` must be a valid ERC20 token address. - `rewardAmount` must be greater than zero and should be meaningful considering the    pool's staking context. - `claimAfterBlocks` specifies the number of blocks to wait before the reward can be    claimed, enforcing a minimum staking period.","params":{"claimAfterBlocks":"The number of blocks to wait before the reward becomes claimable.","isForERC721Stakers":"A boolean indicating whether the reward is for ERC721 stakers  (true) or ERC20 stakers (false).","poolId":"The ID of the pool to which the reward is being added.","rewardAmount":"The amount of reward tokens to be distributed.","rewardToken":"The ERC20 token address to be used for the reward."},"returns":{"rewardId":"The ID of the newly added reward in the pool."}},"claimRewards(uint256[],uint256[][],address)":{"custom:error":"PoolDoesNotExist Indicates that one of the specified pools does not exist.RewardNotFoundInPool Indicates that one of the specified rewards does not  exist in the corresponding pool.RewardAlreadyClaimed Indicates that the user has already claimed the  specified reward.RewardIsNotYetAvailableForClaim Indicates that the reward is not yet  available for claiming, typically because the claimAfterBlocks period has not yet passed.RewardIsEmpty Indicates that there is no reward available to be claimed,  possibly because the user does not have a qualifying stake.RewardTransferFailed Indicates that the transfer of the reward tokens to  the recipient address failed.","details":"Allows users to claim their pending rewards for a specific pool or multiple pools. This function calculates the claimable rewards based on the user's stakes and the pool's  reward configuration, then transfers the appropriate amount of reward tokens to the user. Emits a {IStaqeEvents-RewardClaimed} event for each reward that is successfully claimed. Requirements: - The caller must have earned rewards in the specified pool(s) that are ready to be claimed. - `poolIds` and `rewardIds` arrays must correspond to each other, specifying which rewards  to claim from which pools. - The `recipient` address must be valid and can be the caller or another address specified  by the caller.","params":{"poolIds":"An array of pool IDs from which the user is claiming rewards.","recipient":"The address that will receive the claimed rewards. It can be the caller's  address or another address specified by the caller.","rewardIds":"A two-dimensional array of reward IDs that the user is claiming,  corresponding to each pool ID in `poolIds`."},"returns":{"amounts":"A two-dimensional array of amounts for the claimed rewards, corresponding  to each claimed reward ID in `rewardIds`.","tokens":"A two-dimensional array of ERC20 token addresses for the claimed rewards,  corresponding to each claimed reward ID in `rewardIds`."}},"editPool(uint256,bytes32)":{"custom:error":"PoolDoesNotExist Indicates that the specified pool does not exist.OnlyRewinderHasAccessToEditMetadata Indicates that only the rewarder  associated with the pool can edit its metadata.InvalidMetadata Indicates that the provided metadata is invalid (e.g.,  empty or the same as the current metadata).","details":"Edits the metadata of an existing staking pool. This function allows the pool's rewarder to update the pool's metadata post-creation. Only the rewarder address associated with the pool has the authority to make this change. Emits a {IStaqeEvents-PoolEdited} event when the metadata is successfully updated. Requirements: - The pool specified by `poolId` must exist. - The caller must be the rewarder of the pool. - The new `metadata` must be different from the existing metadata and cannot be empty.","params":{"metadata":"The new metadata for the pool, encoded as bytes32. It must be different  from the current metadata and cannot be the zero bytes.","poolId":"The ID of the pool whose metadata is being updated."}},"launchPool(address,address,address,address,bytes32)":{"custom:error":"InvalidStakeToken Indicates that the provided ERC20 or ERC721 token  address is invalid.InvalidRewardToken Indicates that the provided reward token address is  invalid.OnlyAvailableToStakersInGenesis Indicates that the function is only  callable by users who are stakers in the genesis pool.","details":"Launches a new staking pool with specified parameters. This function allows the contract caller to create a new staking pool where users can  stake specific ERC20 or ERC721 tokens to earn rewards. Emits a {IStaqeEvents-PoolLaunched} event. Requirements: - The caller must have certain privileges, typically being an admin or contract owner. - `stakeERC20` and `stakeERC721` cannot both be zero addresses; at least one valid    token address must be provided. - `rewardToken` must be a valid ERC20 token address that will be used for distributing    rewards. - `rewarder` is the address authorized to manage rewards for the pool, often the same    as the caller or a dedicated rewards manager. - `metadata` is field that can be used to store additional information    about the pool, encoded in bytes32.","params":{"metadata":"Metadata providing additional information about the pool,  encoded as bytes32.","rewardToken":"The ERC20 token address that will be used to distribute rewards to  stakers.","rewarder":"The address with the authority to manage and distribute rewards for  this pool.","stakeERC20":"The ERC20 token address that users will stake in this pool. Can be  the zero address if the pool is for ERC721 staking.","stakeERC721":"The ERC721 token address that users will stake in this pool. Can be  the zero address if the pool is for ERC20 staking."},"returns":{"poolId":"The ID of the newly created staking pool, which can be used to interact  with the pool in future transactions."}},"stake(uint256,uint256,uint256)":{"custom:error":"PoolDoesNotExist Indicates that the specified pool does not exist.InvalidAmountOrId Indicates that both `amount` and `id` are zero, or their  values are not consistent with the token type expected by the pool.StakeTransferFailed Indicates that the transfer of tokens to the contract  failed, which could be due to insufficient balance or allowance.","details":"Allows a user to stake ERC20 or ERC721 tokens into a specified pool. This function records the user's stake in the pool, updating the pool's total staked  amounts and the user's staking details. Users can stake either ERC20 or ERC721 tokens,  but not both at the same time. Emits a {IStaqeEvents-StakeCreated} event when the stake is successfully created. Requirements: - The pool specified by `poolId` must exist. - At least one of `amount` or `id` must be non-zero, corresponding to the type of token  being staked (ERC20 or ERC721, respectively). - If staking ERC20 tokens, `amount` must be greater than zero and the user must have  enough balance and allowance. - If staking an ERC721 token, `id` must be a valid token ID owned by the caller.","params":{"amount":"The amount of ERC20 tokens to stake. Should be zero if staking an ERC721 token.","id":"The ID of the ERC721 token to stake. Should be zero if staking ERC20 tokens.","poolId":"The ID of the pool where the tokens are being staked."},"returns":{"stakeId":"The ID of the newly created stake record."}},"unstake(uint256,uint256[])":{"custom:error":"PoolDoesNotExist Indicates that the specified pool does not exist.PoolDoesNotHaveStakes Indicates that the pool does not have any active  stakes, or the user does not have any active stakes in the pool.UnstakeTransferFailed Indicates that the transfer of staked tokens back to  the user failed.UnstakeOnNextBlockAndGetReward Suggests that the user should wait until the  next block to unstake in order to receive an upcoming reward.StakerDoesNotHaveStakesInPool Indicates that the staker does not have the  specified stakes in the pool.","details":"Allows a user to unstake previously staked ERC20 or ERC721 tokens from a specified pool. This function enables users to retrieve their staked tokens, updating the pool's and user's  staking records accordingly. Emits a {IStaqeEvents-StakeWithdrawn} event when the tokens are successfully unstaked. Requirements: - The pool specified by `poolId` must exist. - The caller must have active stakes in the specified pool. - `stakeIds` array should contain valid stake IDs corresponding to the user's stakes. - Users can only unstake after the reward distribution for their stakes has been resolved.","params":{"poolId":"The ID of the pool from which the tokens are being unstaked.","stakeIds":"An array of stake IDs that the user wishes to unstake. These IDs must  correspond to the stakes the user has in the pool."},"returns":{"amountERC20":"The total amount of ERC20 tokens returned to the user as a result of  the unstaking.","idsERC721":"An array of the ERC721 token IDs returned to the user as a result of  the unstaking."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@staqeprotocol/v1-core/contracts/=contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IStaqe.sol":"IStaqe"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/interfaces/IStaqe.sol":{"keccak256":"0x3d440604e0470c16dc9b65ee99a23101f839b831f744f3cb24679fdc29f24ec4","urls":["bzz-raw://6887375377bbac8a7f4502870847ed7aec5acc695b27e49d8639b0be65cc80d9","dweb:/ipfs/QmParkvAJQZ1R3YkDLqmn8PUtdrfn7wqnyAqGHPTv5dy61"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeErrors.sol":{"keccak256":"0x412008d37eef8b26c3c3a76bd38e902513a37d5b4ea51e8abce70884cf3a5222","urls":["bzz-raw://bf2c341f68e81e4aec8de2cf93bf006c06bd3a3f36958c9d3417bbc7102cb2af","dweb:/ipfs/QmWdDbg24MahmiqeUuqVN9jt3E8LcVjeTmuSnSduGkgLxs"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeEvents.sol":{"keccak256":"0xc5ebfde89076399b1a918430bbfbd552ff9774cdd74f6583e58243897950960a","urls":["bzz-raw://0a3dee597c769fbd883debee5335cbd1d23068d0db1f86118e99e150c0455636","dweb:/ipfs/QmWRkkjrRnffCavifr83J3jvixS4hLKsPCyQwSS5H889dj"],"license":"BUSL-1.1"},"contracts/interfaces/IStaqeStructs.sol":{"keccak256":"0xa8d4e5d77baf53db00b5ddb7431497de4a66976fee13cfcd05f6feabf1bfb2a5","urls":["bzz-raw://41b6270c14a011ceb0d0af2e01abcb2b999c9e882f83af19419ceb4ccc12f24c","dweb:/ipfs/QmYfGEHohB7HPK5rr74GfQMkbmgJCtdhKe9XLfMUYW3TTu"],"license":"BUSL-1.1"},"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"keccak256":"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92","urls":["bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a","dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"keccak256":"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7","urls":["bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f","dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80","urls":["bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229","dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol":{"keccak256":"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee","urls":["bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2","dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff","urls":["bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d","dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4","urls":["bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7","dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Nonces.sol":{"keccak256":"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f","urls":["bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e","dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol":{"keccak256":"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6","urls":["bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c","dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418","urls":["bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c","dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","urls":["bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453","dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf","urls":["bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c","dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol":{"keccak256":"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0","urls":["bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21","dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435","urls":["bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c","dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","urls":["bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df","dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d","urls":["bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875","dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72","urls":["bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc","dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"],"license":"MIT"}},"version":1},"id":3}