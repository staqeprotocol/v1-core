{"abi":[{"type":"function","name":"addReward","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"rewardAmount","type":"uint256","internalType":"uint256"},{"name":"claimAfterBlocks","type":"uint256","internalType":"uint256"},{"name":"isForERC721Stakers","type":"bool","internalType":"bool"}],"outputs":[{"name":"rewardId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"approve","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"claimRewards","inputs":[{"name":"poolIds","type":"uint256[]","internalType":"uint256[]"},{"name":"rewardIds","type":"uint256[][]","internalType":"uint256[][]"},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[{"name":"tokens","type":"address[][]","internalType":"contract IERC20[][]"},{"name":"amounts","type":"uint256[][]","internalType":"uint256[][]"}],"stateMutability":"nonpayable"},{"type":"function","name":"contractURI","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"getApproved","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"launchPool","inputs":[{"name":"stakeERC20","type":"address","internalType":"contract IERC20"},{"name":"stakeERC721","type":"address","internalType":"contract IERC721"},{"name":"rewardToken","type":"address","internalType":"contract IERC20"},{"name":"totalMax","type":"uint256","internalType":"uint256"},{"name":"tokenURI","type":"string","internalType":"string"}],"outputs":[{"name":"poolId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"ownerOf","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setContractURI","inputs":[{"name":"newURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"stakeId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"tokenURI","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unstake","inputs":[{"name":"poolId","type":"uint256","internalType":"uint256"},{"name":"stakeIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"amountERC20","type":"uint256","internalType":"uint256"},{"name":"idsERC721","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"BatchMetadataUpdate","inputs":[{"name":"_fromTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"_toTokenId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Claimed","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ContractURIUpdated","inputs":[],"anonymous":false},{"type":"event","name":"Launched","inputs":[{"name":"launcher","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MetadataUpdate","inputs":[{"name":"_tokenId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Rewarded","inputs":[{"name":"rewarder","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Staked","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"stakeId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Unstaked","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"ERC721IncorrectOwner","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721InsufficientApproval","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC721InvalidApprover","inputs":[{"name":"approver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721InvalidOperator","inputs":[{"name":"operator","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721InvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721InvalidReceiver","inputs":[{"name":"receiver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721InvalidSender","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"ERC721NonexistentToken","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"InvalidAmountOrId","inputs":[]},{"type":"error","name":"InvalidERC721Token","inputs":[]},{"type":"error","name":"InvalidRewardToken","inputs":[]},{"type":"error","name":"InvalidStakeId","inputs":[]},{"type":"error","name":"InvalidStakeToken","inputs":[]},{"type":"error","name":"InvalidTokenURI","inputs":[]},{"type":"error","name":"MoreThanTheTotalMaxTokens","inputs":[]},{"type":"error","name":"OnlyAvailableToStakersInGenesis","inputs":[]},{"type":"error","name":"OnlyOwnerHasAccessToAddRewards","inputs":[]},{"type":"error","name":"OnlyOwnerHasAccessToEditTokenURI","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"PoolDoesNotExist","inputs":[]},{"type":"error","name":"PoolDoesNotHaveStakes","inputs":[]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"RewardAlreadyClaimed","inputs":[]},{"type":"error","name":"RewardIsEmpty","inputs":[]},{"type":"error","name":"RewardIsNotYetAvailableForClaim","inputs":[]},{"type":"error","name":"RewardNotFoundInPool","inputs":[]},{"type":"error","name":"RewardTransferFailed","inputs":[]},{"type":"error","name":"StakeAlreadyUnstaked","inputs":[]},{"type":"error","name":"StakeOnNextBlockAfterReward","inputs":[]},{"type":"error","name":"StakeTransferFailed","inputs":[]},{"type":"error","name":"StakerDoesNotHaveStakesInPool","inputs":[]},{"type":"error","name":"TotalMaxForOnlyOneTypeOfToken","inputs":[]},{"type":"error","name":"UnstakeOnNextBlockAndGetReward","inputs":[]},{"type":"error","name":"UnstakeTransferFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addReward(uint256,address,uint256,uint256,bool)":"7ebfee3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claimRewards(uint256[],uint256[][],address)":"99a47faa","contractURI()":"e8a3d485","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","launchPool(address,address,address,uint256,string)":"00936c9a","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setContractURI(string)":"938e3d7b","stake(uint256,uint256,uint256)":"a638f2e2","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","unstake(uint256,uint256[])":"395de242"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountOrId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoreThanTheTotalMaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAvailableToStakersInGenesis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerHasAccessToAddRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerHasAccessToEditTokenURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotHaveStakes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsNotYetAvailableForClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardNotFoundInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeOnNextBlockAfterReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakerDoesNotHaveStakesInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalMaxForOnlyOneTypeOfToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeOnNextBlockAndGetReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launcher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAfterBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForERC721Stakers\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"rewardIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeERC20\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"stakeERC721\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMax\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"launchPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountERC20\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsERC721\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract includes functionalities to launch new pools, stake and unstake tokens, add rewards, and  claim rewards. It adheres to the IStaqe interface, ensuring compliance with the defined staking and reward  mechanisms. The contract uses OpenZeppelin's ERC20 and ERC721 implementations for token and pool interactions.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"ContractURIUpdated()\":{\"details\":\"This event is emitted when the contract's metadata URI is updated.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,address,uint256,uint256,bool)\":{\"custom:error\":\"PoolDoesNotExist Thrown if the poolId does not correspond to an existing pool.InvalidRewardToken Thrown if the rewardToken address is the zero address.RewardIsEmpty Thrown if rewardAmount is zero or, for ERC721 stakers, exceeds the number  of staked ERC721 tokens.OnlyOwnerHasAccessToAddRewards Thrown if the caller is not the owner of the pool.PoolDoesNotHaveStakes Thrown if there are no stakers in the pool for the specified staker  type (ERC20 or ERC721).RewardTransferFailed Thrown if the transfer of reward tokens to the pool fails.\",\"details\":\" Allows the owner of a pool to add a reward in the form of ERC20 tokens. This function can be used to incentivize  stakers by offering rewards based on their participation in the pool. The rewards can be configured specifically  for ERC20 or ERC721 stakers. The reward amount, along with the block number after which it can be claimed, is  recorded. This function ensures that only the pool owner can add rewards and that the reward settings are valid.\",\"params\":{\"claimAfterBlocks\":\"The number of blocks after which the reward can be claimed. This allows setting a  delay between the reward distribution and when it can be claimed by the stakers.\",\"isForERC721Stakers\":\"Specifies whether the reward is for ERC721 stakers (true) or ERC20 stakers (false).\",\"poolId\":\"The ID of the pool to which the reward is being added. The pool must exist and the caller must  be the owner of the pool.\",\"rewardAmount\":\"The amount of the rewardToken to be distributed as rewards. Must be greater than zero  and, for ERC721 stakers, not exceed the number of staked ERC721 tokens.\",\"rewardToken\":\"The ERC20 token to be used as the reward. The address must not be the zero address.\"},\"returns\":{\"rewardId\":\"A unique identifier for the reward within the pool, represented as a uint256.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimRewards(uint256[],uint256[][],address)\":{\"custom:error\":\"RewardIsEmpty Thrown if the reward amount is zero or has already been claimed.RewardTransferFailed Thrown if the transfer of reward tokens to the recipient fails.RewardIsNotYetAvailableForClaim Thrown if an attempt is made to claim a reward before  the specified waiting period has elapsed since the reward's distribution.RewardAlreadyClaimed Thrown if an attempt is made to claim a reward that has already  been claimed by the user.RewardNotFoundInPool Thrown if any of the provided reward IDs do not correspond to valid  rewards in the specified pools.StakerDoesNotHaveStakesInPool Thrown if the user does not have stakes in one of the  specified pools and is therefore ineligible to claim rewards from that pool.\",\"details\":\" Allows users to claim their earned rewards from one or more pools. The function supports claiming  multiple rewards from multiple pools in a single transaction. Users specify the pools and the specific  rewards within those pools they wish to claim. The function calculates the reward amounts based on the  user's stakes and the reward distribution rules for each pool. It ensures that rewards are only claimed  once and that the claim is made after the specified waiting period post reward distribution. The rewards  are transferred to a specified recipient address, which can be the user's address or another address  specified by the user. \",\"params\":{\"poolIds\":\"An array of pool IDs from which the user wants to claim rewards. Each pool ID must  correspond to a pool where the user has staked tokens and earned rewards.\",\"recipient\":\"The address to receive the claimed rewards. If set to the zero address, the rewards  will be sent to the caller's address. \",\"rewardIds\":\"A two-dimensional array of reward IDs that the user wants to claim, corresponding to  each pool ID in the poolIds array. Each inner array of reward IDs is associated with the pool ID at the  same index in the poolIds array.\"},\"returns\":{\"amounts\":\"A two-dimensional array of uint256 values representing the amounts of each reward token  claimed from each pool. The structure mirrors the tokens array.\",\"tokens\":\"A two-dimensional array of IERC20 tokens representing the types of rewards claimed from  each pool. Each inner array corresponds to the rewards claimed from the pool at the same index in the  poolIds array.\"}},\"contractURI()\":{\"details\":\"See {IERC7572-contractURI}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"launchPool(address,address,address,uint256,string)\":{\"custom:error\":\"OnlyAvailableToStakersInGenesis Thrown if the caller has not staked in the Genesis pool.InvalidERC721Token Thrown if the provided ERC721 token address does not comply with the ERC721 standard.InvalidStakeToken Thrown if both stakeERC20 and stakeERC721 are set to the zero address.InvalidTokenURI Thrown if the provided tokenURI is an empty string.TotalMaxForOnlyOneTypeOfToken Thrown if totalMax is set but both types of tokens are allowed for staking.\",\"details\":\" Implements the functionality for launching a new staking pool within the Staqe platform. This function allows users who have staked in the Genesis pool to create their own staking pools. Each new pool is an ERC721 token, allowing it to be transferred or sold. Users specify the types of tokens that can be staked (ERC20 and/or ERC721) and the token  for rewards. They also set a maximum limit for the total stakable tokens and a tokenURI for the pool's ERC721 representation. If both ERC20 and ERC721 tokens are accepted for staking, the totalMax parameter applies to only one type, based on which token is not set to the zero address. \",\"params\":{\"rewardToken\":\"The ERC20 token to be used as a reward in the new pool.\",\"stakeERC20\":\"The ERC20 token that can be staked in the new pool. If set to the zero address, the pool will only accept ERC721 tokens for staking.\",\"stakeERC721\":\"The ERC721 token that can be staked in the new pool. If set to the zero address, the pool will only accept ERC20 tokens for staking.\",\"tokenURI\":\"The URI for the token metadata of the pool's ERC721 representation. Must be a non-empty string. \",\"totalMax\":\"The maximum number of tokens (ERC20 or ERC721, but not both) that can be staked in the pool. If set to zero, there is no limit.\"},\"returns\":{\"poolId\":\"The ID of the newly launched pool, represented as a uint256. \"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-7572\"},\"stake(uint256,uint256,uint256)\":{\"custom:error\":\"PoolDoesNotExist Thrown if the specified poolId does not correspond to an existing pool.InvalidAmountOrId Thrown if both amount and id are set to zero, indicating no stake.StakeOnNextBlockAfterReward Thrown if an attempt is made to stake in a block immediately  following a reward distribution block, to ensure fair reward allocation.MoreThanTheTotalMaxTokens Thrown if the staking would exceed the pool's maximum allowed  total stake for the token type being staked.StakeTransferFailed Thrown if the token transfer to the pool (for ERC20) or the token  transfer call (for ERC721) fails.\",\"details\":\" Enables users to stake their tokens in a specified pool. Users can stake either ERC20 or ERC721 tokens,  but not both in a single transaction. The function records the staking action, updating the total  staked amounts for the pool and tracking the individual stakes of the user. Each stake is identified  by a unique stakeId within the pool. The function ensures that the staking aligns with the pool's  requirements and restrictions, such as the token type and the maximum staking limits. \",\"params\":{\"amount\":\"If staking an ERC20 token, this is the amount to stake. If staking an ERC721 token, this should be set to zero.\",\"id\":\"If staking an ERC721 token, this is the token ID to stake. If staking an ERC20 token, this should be set to zero. \",\"poolId\":\"The ID of the pool in which the user wants to stake tokens. Must correspond to an  existing pool.\"},\"returns\":{\"stakeId\":\"A unique identifier for the stake within the pool, represented as a uint256. \"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256,uint256[])\":{\"custom:error\":\"PoolDoesNotExist Thrown if the poolId does not correspond to an existing pool.UnstakeOnNextBlockAndGetReward Thrown if an attempt is made to unstake in the same block  as a reward distribution, to ensure that rewards are allocated based on the stakes at the time of  distribution.StakerDoesNotHaveStakesInPool Thrown if the user has no stakes in the specified pool or  if the stakeIds array is empty.InvalidStakeId Thrown if any of the provided stakeIds do not correspond to valid stakes  made by the user in the pool.StakeAlreadyUnstaked Thrown if an attempt is made to unstake a stake that has already been  unstaked.UnstakeTransferFailed Thrown if the transfer of staked tokens back to the user fails.\",\"details\":\" Allows users to unstake their previously staked tokens from a specified pool. The function supports  unstaking both ERC20 and ERC721 tokens. Users specify the pool and the stakes they wish to withdraw  through their unique stake IDs. The function calculates the total amount of ERC20 tokens and the specific  ERC721 token IDs to be returned to the user. It also updates the pool's and the user's staking records to  reflect the unstaking. The unstake operation is subject to checks to prevent it from being executed in the  same block as a reward distribution, ensuring fairness in the reward allocation process. \",\"params\":{\"poolId\":\"The ID of the pool from which the tokens are to be unstaked. The pool must exist and have  a record of the user's stakes.\",\"stakeIds\":\"An array of stake IDs that the user wants to unstake. Each ID must correspond to an  existing stake made by the caller in the specified pool. \"},\"returns\":{\"amountERC20\":\"The total amount of ERC20 tokens being unstaked and returned to the user.\",\"idsERC721\":\"An array of token IDs for the ERC721 tokens being unstaked and returned to the user.\"}}},\"title\":\"Staqe\",\"version\":1},\"userdoc\":{\"events\":{\"ContractURIUpdated()\":{\"notice\":\"Emitted when the contract URI is updated.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"_                     _       _             __   ___| |_ __ _  __ _  ___  (_)_ __ | |_ ___ _ __ / _| __ _  ___ ___  / __| __/ _` |/ _` |/ _ \\\\ | | '_ \\\\| __/ _ \\\\ '__| |_ / _` |/ __/ _ \\\\  \\\\__ \\\\ || (_| | (_| |  __/ | | | | | ||  __/ |  |  _| (_| | (_|  __/  |___/\\\\__\\\\__,_|\\\\__, |\\\\___| |_|_| |_|\\\\__\\\\___|_|  |_|  \\\\__,_|\\\\___\\\\___|                   |_|This contract interface a staking platform for ERC20 and ERC721 tokens. Users can stake tokens to  participate in pools, earn rewards, and create their own staking pools if they own a Genesis NFT. The contract supports the creation, management, and interaction with various staking pools, each with its own settings and reward mechanisms. Users can stake and unstake at any time, claim rewards, and transfer pool ownership through ERC721 representation. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStaqe.sol\":\"IStaqe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@staqeprotocol/v1-core/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IERC7572.sol\":{\"keccak256\":\"0xd9f544c0cddaa95c8ea24da1faf25e8360ee41d1bafa6a69733df0a980bdc6d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efbdeb88c9f63e1d7348c85b6fe241782e162f51cf2c769f9a13b429bb1daf01\",\"dweb:/ipfs/QmVfqpLEfNdGyu4cWT8CCgy7vEATeYdahaTvQgbngQ8jnK\"]},\"contracts/interfaces/IStaqe.sol\":{\"keccak256\":\"0xbd135f8cf1696bc63ec6e8aa41c515f59746212b448a3d96608bac1ae794107d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20162294eb2ef077cb9db4662dd3def77fe8c3f11471d44a8e0e20b44df6b03f\",\"dweb:/ipfs/QmfDBxH2Y7WAQeibwXSQKmKmN4xcfw3rxGQGSr1WWHHTE3\"]},\"contracts/interfaces/IStaqeERC721.sol\":{\"keccak256\":\"0x534134b4e77449fd7e78ea4907ab1ffd7674b1d6a18cb4e1247fe187f4457af6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5331648ac74347ff1c34b4503367ada79ed0cdc8d19e8d7a06336e313111f367\",\"dweb:/ipfs/QmR8yrXWJgQoHooXvYujKnN3Cbkj1FCbGcKUetX35aiSps\"]},\"contracts/interfaces/IStaqeERC7572.sol\":{\"keccak256\":\"0xe0ed8c09fa0cc0c64e5b2cde0899a477efbe82d41d56ddfd896f6b6f3732e12d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08107912ef2f4021938ef17dd921c66fa77e8bef53bd30e473ee9256e9efaf8b\",\"dweb:/ipfs/Qmek58iTKkFNPMfFVhqxvbi9zkZBoVfG6YYnBRFpp8ip65\"]},\"contracts/interfaces/IStaqeErrors.sol\":{\"keccak256\":\"0x8b57735bf1be96b0fb8277f05421e9d7d27503ffa3a261834c3bd0257cdb0298\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56a04571c519962dfeae734c9ea7ff6e1e5aa38fcc52a46966a0f70379b955c1\",\"dweb:/ipfs/QmXSjSbqWTzS88fPdXXbr9jrpGwoLdJHwLArstscxBogMH\"]},\"contracts/interfaces/IStaqeEvents.sol\":{\"keccak256\":\"0x58de9ceeafdd1b5a382f6db22cf25a025ea18d37de0de9c69d25072cd435d823\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a39a0dd0319c9c30d29530d034f1c42d79795ac1c3acd20ae555b67a6c32fbfa\",\"dweb:/ipfs/Qmcyz23a1xa1SGTCM68rfDU4hj2zsH59xcSdKwcmSKo774\"]},\"contracts/interfaces/IStaqeReentrancy.sol\":{\"keccak256\":\"0x70a6066167ff3c41edb72e4a653a02ca3e6f216e814ac4a8883dea8fc0060ac5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b3cc5659242fe0aca4784a1b6fc1075db7935b5c23df6145bfc8edd14da5451\",\"dweb:/ipfs/QmVMcVn224qjW4mGRAic83Go3pdTLz3U6xTxPKwpXut58J\"]},\"contracts/interfaces/IStaqeStructs.sol\":{\"keccak256\":\"0x326e0f58389fc2cc10916f5f711d740857f35dd58b822d0c4f955e73018d2921\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://693cd5627014538ee09e95dcb968905b95d7ab9cde2306e7f7bfe764dc73b328\",\"dweb:/ipfs/QmZxFrzoqyFLTLtifCmAm9et2GiqjPMNSE8F6bUcpr4Pjb\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol\":{\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a89c6fb0cd5fef4244500b633f63def9f2bb2134debb961e590bd5a2910662fd\",\"dweb:/ipfs/QmNqWyCxyopvb99RbRomPpfTZGXRi5MnzgpFXE2BFLLgMc\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\":{\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://01c66a2fad66bc710db7510419a7eee569b40b67cd9f01b70a3fc90d6f76c03b\",\"dweb:/ipfs/QmT1CjJZq4eTNA4nu8E9ZrWfaZu6ReUsDbjcK8DbEFqwx5\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd\",\"dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24915e61c7896c336b60788408cd5792b97b782e98e392920a2c55eb1803fe96\",\"dweb:/ipfs/QmVHhcmFnMYZBCjnVUk6f5quMCDsBR2j669a1nuMiGWY9Z\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"ERC721IncorrectOwner"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"type":"error","name":"ERC721InsufficientApproval"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"type":"error","name":"ERC721InvalidApprover"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"type":"error","name":"ERC721InvalidOperator"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"ERC721InvalidOwner"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"type":"error","name":"ERC721InvalidReceiver"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"ERC721InvalidSender"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"type":"error","name":"ERC721NonexistentToken"},{"inputs":[],"type":"error","name":"InvalidAmountOrId"},{"inputs":[],"type":"error","name":"InvalidERC721Token"},{"inputs":[],"type":"error","name":"InvalidRewardToken"},{"inputs":[],"type":"error","name":"InvalidStakeId"},{"inputs":[],"type":"error","name":"InvalidStakeToken"},{"inputs":[],"type":"error","name":"InvalidTokenURI"},{"inputs":[],"type":"error","name":"MoreThanTheTotalMaxTokens"},{"inputs":[],"type":"error","name":"OnlyAvailableToStakersInGenesis"},{"inputs":[],"type":"error","name":"OnlyOwnerHasAccessToAddRewards"},{"inputs":[],"type":"error","name":"OnlyOwnerHasAccessToEditTokenURI"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnableInvalidOwner"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OwnableUnauthorizedAccount"},{"inputs":[],"type":"error","name":"PoolDoesNotExist"},{"inputs":[],"type":"error","name":"PoolDoesNotHaveStakes"},{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"},{"inputs":[],"type":"error","name":"RewardAlreadyClaimed"},{"inputs":[],"type":"error","name":"RewardIsEmpty"},{"inputs":[],"type":"error","name":"RewardIsNotYetAvailableForClaim"},{"inputs":[],"type":"error","name":"RewardNotFoundInPool"},{"inputs":[],"type":"error","name":"RewardTransferFailed"},{"inputs":[],"type":"error","name":"StakeAlreadyUnstaked"},{"inputs":[],"type":"error","name":"StakeOnNextBlockAfterReward"},{"inputs":[],"type":"error","name":"StakeTransferFailed"},{"inputs":[],"type":"error","name":"StakerDoesNotHaveStakesInPool"},{"inputs":[],"type":"error","name":"TotalMaxForOnlyOneTypeOfToken"},{"inputs":[],"type":"error","name":"UnstakeOnNextBlockAndGetReward"},{"inputs":[],"type":"error","name":"UnstakeTransferFailed"},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"approved","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"uint256","name":"_fromTokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"_toTokenId","type":"uint256","indexed":false}],"type":"event","name":"BatchMetadataUpdate","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true}],"type":"event","name":"Claimed","anonymous":false},{"inputs":[],"type":"event","name":"ContractURIUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"launcher","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true}],"type":"event","name":"Launched","anonymous":false},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256","indexed":false}],"type":"event","name":"MetadataUpdate","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"rewarder","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardId","type":"uint256","indexed":true}],"type":"event","name":"Rewarded","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true},{"internalType":"uint256","name":"stakeId","type":"uint256","indexed":true}],"type":"event","name":"Staked","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"uint256","name":"poolId","type":"uint256","indexed":true}],"type":"event","name":"Unstaked","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"uint256","name":"claimAfterBlocks","type":"uint256"},{"internalType":"bool","name":"isForERC721Stakers","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"addReward","outputs":[{"internalType":"uint256","name":"rewardId","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"poolIds","type":"uint256[]"},{"internalType":"uint256[][]","name":"rewardIds","type":"uint256[][]"},{"internalType":"address","name":"recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"claimRewards","outputs":[{"internalType":"contract IERC20[][]","name":"tokens","type":"address[][]"},{"internalType":"uint256[][]","name":"amounts","type":"uint256[][]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"contract IERC20","name":"stakeERC20","type":"address"},{"internalType":"contract IERC721","name":"stakeERC721","type":"address"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"totalMax","type":"uint256"},{"internalType":"string","name":"tokenURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"launchPool","outputs":[{"internalType":"uint256","name":"poolId","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"string","name":"newURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"setContractURI"},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"stake","outputs":[{"internalType":"uint256","name":"stakeId","type":"uint256"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"uint256[]","name":"stakeIds","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"unstake","outputs":[{"internalType":"uint256","name":"amountERC20","type":"uint256"},{"internalType":"uint256[]","name":"idsERC721","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"addReward(uint256,address,uint256,uint256,bool)":{"custom:error":"PoolDoesNotExist Thrown if the poolId does not correspond to an existing pool.InvalidRewardToken Thrown if the rewardToken address is the zero address.RewardIsEmpty Thrown if rewardAmount is zero or, for ERC721 stakers, exceeds the number  of staked ERC721 tokens.OnlyOwnerHasAccessToAddRewards Thrown if the caller is not the owner of the pool.PoolDoesNotHaveStakes Thrown if there are no stakers in the pool for the specified staker  type (ERC20 or ERC721).RewardTransferFailed Thrown if the transfer of reward tokens to the pool fails.","details":" Allows the owner of a pool to add a reward in the form of ERC20 tokens. This function can be used to incentivize  stakers by offering rewards based on their participation in the pool. The rewards can be configured specifically  for ERC20 or ERC721 stakers. The reward amount, along with the block number after which it can be claimed, is  recorded. This function ensures that only the pool owner can add rewards and that the reward settings are valid.","params":{"claimAfterBlocks":"The number of blocks after which the reward can be claimed. This allows setting a  delay between the reward distribution and when it can be claimed by the stakers.","isForERC721Stakers":"Specifies whether the reward is for ERC721 stakers (true) or ERC20 stakers (false).","poolId":"The ID of the pool to which the reward is being added. The pool must exist and the caller must  be the owner of the pool.","rewardAmount":"The amount of the rewardToken to be distributed as rewards. Must be greater than zero  and, for ERC721 stakers, not exceed the number of staked ERC721 tokens.","rewardToken":"The ERC20 token to be used as the reward. The address must not be the zero address."},"returns":{"rewardId":"A unique identifier for the reward within the pool, represented as a uint256."}},"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"claimRewards(uint256[],uint256[][],address)":{"custom:error":"RewardIsEmpty Thrown if the reward amount is zero or has already been claimed.RewardTransferFailed Thrown if the transfer of reward tokens to the recipient fails.RewardIsNotYetAvailableForClaim Thrown if an attempt is made to claim a reward before  the specified waiting period has elapsed since the reward's distribution.RewardAlreadyClaimed Thrown if an attempt is made to claim a reward that has already  been claimed by the user.RewardNotFoundInPool Thrown if any of the provided reward IDs do not correspond to valid  rewards in the specified pools.StakerDoesNotHaveStakesInPool Thrown if the user does not have stakes in one of the  specified pools and is therefore ineligible to claim rewards from that pool.","details":" Allows users to claim their earned rewards from one or more pools. The function supports claiming  multiple rewards from multiple pools in a single transaction. Users specify the pools and the specific  rewards within those pools they wish to claim. The function calculates the reward amounts based on the  user's stakes and the reward distribution rules for each pool. It ensures that rewards are only claimed  once and that the claim is made after the specified waiting period post reward distribution. The rewards  are transferred to a specified recipient address, which can be the user's address or another address  specified by the user. ","params":{"poolIds":"An array of pool IDs from which the user wants to claim rewards. Each pool ID must  correspond to a pool where the user has staked tokens and earned rewards.","recipient":"The address to receive the claimed rewards. If set to the zero address, the rewards  will be sent to the caller's address. ","rewardIds":"A two-dimensional array of reward IDs that the user wants to claim, corresponding to  each pool ID in the poolIds array. Each inner array of reward IDs is associated with the pool ID at the  same index in the poolIds array."},"returns":{"amounts":"A two-dimensional array of uint256 values representing the amounts of each reward token  claimed from each pool. The structure mirrors the tokens array.","tokens":"A two-dimensional array of IERC20 tokens representing the types of rewards claimed from  each pool. Each inner array corresponds to the rewards claimed from the pool at the same index in the  poolIds array."}},"contractURI()":{"details":"See {IERC7572-contractURI}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"launchPool(address,address,address,uint256,string)":{"custom:error":"OnlyAvailableToStakersInGenesis Thrown if the caller has not staked in the Genesis pool.InvalidERC721Token Thrown if the provided ERC721 token address does not comply with the ERC721 standard.InvalidStakeToken Thrown if both stakeERC20 and stakeERC721 are set to the zero address.InvalidTokenURI Thrown if the provided tokenURI is an empty string.TotalMaxForOnlyOneTypeOfToken Thrown if totalMax is set but both types of tokens are allowed for staking.","details":" Implements the functionality for launching a new staking pool within the Staqe platform. This function allows users who have staked in the Genesis pool to create their own staking pools. Each new pool is an ERC721 token, allowing it to be transferred or sold. Users specify the types of tokens that can be staked (ERC20 and/or ERC721) and the token  for rewards. They also set a maximum limit for the total stakable tokens and a tokenURI for the pool's ERC721 representation. If both ERC20 and ERC721 tokens are accepted for staking, the totalMax parameter applies to only one type, based on which token is not set to the zero address. ","params":{"rewardToken":"The ERC20 token to be used as a reward in the new pool.","stakeERC20":"The ERC20 token that can be staked in the new pool. If set to the zero address, the pool will only accept ERC721 tokens for staking.","stakeERC721":"The ERC721 token that can be staked in the new pool. If set to the zero address, the pool will only accept ERC20 tokens for staking.","tokenURI":"The URI for the token metadata of the pool's ERC721 representation. Must be a non-empty string. ","totalMax":"The maximum number of tokens (ERC20 or ERC721, but not both) that can be staked in the pool. If set to zero, there is no limit."},"returns":{"poolId":"The ID of the newly launched pool, represented as a uint256. "}},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"setContractURI(string)":{"details":"See https://eips.ethereum.org/EIPS/eip-7572"},"stake(uint256,uint256,uint256)":{"custom:error":"PoolDoesNotExist Thrown if the specified poolId does not correspond to an existing pool.InvalidAmountOrId Thrown if both amount and id are set to zero, indicating no stake.StakeOnNextBlockAfterReward Thrown if an attempt is made to stake in a block immediately  following a reward distribution block, to ensure fair reward allocation.MoreThanTheTotalMaxTokens Thrown if the staking would exceed the pool's maximum allowed  total stake for the token type being staked.StakeTransferFailed Thrown if the token transfer to the pool (for ERC20) or the token  transfer call (for ERC721) fails.","details":" Enables users to stake their tokens in a specified pool. Users can stake either ERC20 or ERC721 tokens,  but not both in a single transaction. The function records the staking action, updating the total  staked amounts for the pool and tracking the individual stakes of the user. Each stake is identified  by a unique stakeId within the pool. The function ensures that the staking aligns with the pool's  requirements and restrictions, such as the token type and the maximum staking limits. ","params":{"amount":"If staking an ERC20 token, this is the amount to stake. If staking an ERC721 token, this should be set to zero.","id":"If staking an ERC721 token, this is the token ID to stake. If staking an ERC20 token, this should be set to zero. ","poolId":"The ID of the pool in which the user wants to stake tokens. Must correspond to an  existing pool."},"returns":{"stakeId":"A unique identifier for the stake within the pool, represented as a uint256. "}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unstake(uint256,uint256[])":{"custom:error":"PoolDoesNotExist Thrown if the poolId does not correspond to an existing pool.UnstakeOnNextBlockAndGetReward Thrown if an attempt is made to unstake in the same block  as a reward distribution, to ensure that rewards are allocated based on the stakes at the time of  distribution.StakerDoesNotHaveStakesInPool Thrown if the user has no stakes in the specified pool or  if the stakeIds array is empty.InvalidStakeId Thrown if any of the provided stakeIds do not correspond to valid stakes  made by the user in the pool.StakeAlreadyUnstaked Thrown if an attempt is made to unstake a stake that has already been  unstaked.UnstakeTransferFailed Thrown if the transfer of staked tokens back to the user fails.","details":" Allows users to unstake their previously staked tokens from a specified pool. The function supports  unstaking both ERC20 and ERC721 tokens. Users specify the pool and the stakes they wish to withdraw  through their unique stake IDs. The function calculates the total amount of ERC20 tokens and the specific  ERC721 token IDs to be returned to the user. It also updates the pool's and the user's staking records to  reflect the unstaking. The unstake operation is subject to checks to prevent it from being executed in the  same block as a reward distribution, ensuring fairness in the reward allocation process. ","params":{"poolId":"The ID of the pool from which the tokens are to be unstaked. The pool must exist and have  a record of the user's stakes.","stakeIds":"An array of stake IDs that the user wants to unstake. Each ID must correspond to an  existing stake made by the caller in the specified pool. "},"returns":{"amountERC20":"The total amount of ERC20 tokens being unstaked and returned to the user.","idsERC721":"An array of token IDs for the ERC721 tokens being unstaked and returned to the user."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@staqeprotocol/v1-core/contracts/=contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IStaqe.sol":"IStaqe"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/interfaces/IERC7572.sol":{"keccak256":"0xd9f544c0cddaa95c8ea24da1faf25e8360ee41d1bafa6a69733df0a980bdc6d8","urls":["bzz-raw://efbdeb88c9f63e1d7348c85b6fe241782e162f51cf2c769f9a13b429bb1daf01","dweb:/ipfs/QmVfqpLEfNdGyu4cWT8CCgy7vEATeYdahaTvQgbngQ8jnK"],"license":"MIT"},"contracts/interfaces/IStaqe.sol":{"keccak256":"0xbd135f8cf1696bc63ec6e8aa41c515f59746212b448a3d96608bac1ae794107d","urls":["bzz-raw://20162294eb2ef077cb9db4662dd3def77fe8c3f11471d44a8e0e20b44df6b03f","dweb:/ipfs/QmfDBxH2Y7WAQeibwXSQKmKmN4xcfw3rxGQGSr1WWHHTE3"],"license":"MIT"},"contracts/interfaces/IStaqeERC721.sol":{"keccak256":"0x534134b4e77449fd7e78ea4907ab1ffd7674b1d6a18cb4e1247fe187f4457af6","urls":["bzz-raw://5331648ac74347ff1c34b4503367ada79ed0cdc8d19e8d7a06336e313111f367","dweb:/ipfs/QmR8yrXWJgQoHooXvYujKnN3Cbkj1FCbGcKUetX35aiSps"],"license":"MIT"},"contracts/interfaces/IStaqeERC7572.sol":{"keccak256":"0xe0ed8c09fa0cc0c64e5b2cde0899a477efbe82d41d56ddfd896f6b6f3732e12d","urls":["bzz-raw://08107912ef2f4021938ef17dd921c66fa77e8bef53bd30e473ee9256e9efaf8b","dweb:/ipfs/Qmek58iTKkFNPMfFVhqxvbi9zkZBoVfG6YYnBRFpp8ip65"],"license":"MIT"},"contracts/interfaces/IStaqeErrors.sol":{"keccak256":"0x8b57735bf1be96b0fb8277f05421e9d7d27503ffa3a261834c3bd0257cdb0298","urls":["bzz-raw://56a04571c519962dfeae734c9ea7ff6e1e5aa38fcc52a46966a0f70379b955c1","dweb:/ipfs/QmXSjSbqWTzS88fPdXXbr9jrpGwoLdJHwLArstscxBogMH"],"license":"MIT"},"contracts/interfaces/IStaqeEvents.sol":{"keccak256":"0x58de9ceeafdd1b5a382f6db22cf25a025ea18d37de0de9c69d25072cd435d823","urls":["bzz-raw://a39a0dd0319c9c30d29530d034f1c42d79795ac1c3acd20ae555b67a6c32fbfa","dweb:/ipfs/Qmcyz23a1xa1SGTCM68rfDU4hj2zsH59xcSdKwcmSKo774"],"license":"MIT"},"contracts/interfaces/IStaqeReentrancy.sol":{"keccak256":"0x70a6066167ff3c41edb72e4a653a02ca3e6f216e814ac4a8883dea8fc0060ac5","urls":["bzz-raw://8b3cc5659242fe0aca4784a1b6fc1075db7935b5c23df6145bfc8edd14da5451","dweb:/ipfs/QmVMcVn224qjW4mGRAic83Go3pdTLz3U6xTxPKwpXut58J"],"license":"MIT"},"contracts/interfaces/IStaqeStructs.sol":{"keccak256":"0x326e0f58389fc2cc10916f5f711d740857f35dd58b822d0c4f955e73018d2921","urls":["bzz-raw://693cd5627014538ee09e95dcb968905b95d7ab9cde2306e7f7bfe764dc73b328","dweb:/ipfs/QmZxFrzoqyFLTLtifCmAm9et2GiqjPMNSE8F6bUcpr4Pjb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","urls":["bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6","dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol":{"keccak256":"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44","urls":["bzz-raw://a89c6fb0cd5fef4244500b633f63def9f2bb2134debb961e590bd5a2910662fd","dweb:/ipfs/QmNqWyCxyopvb99RbRomPpfTZGXRi5MnzgpFXE2BFLLgMc"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol":{"keccak256":"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d","urls":["bzz-raw://01c66a2fad66bc710db7510419a7eee569b40b67cd9f01b70a3fc90d6f76c03b","dweb:/ipfs/QmT1CjJZq4eTNA4nu8E9ZrWfaZu6ReUsDbjcK8DbEFqwx5"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"keccak256":"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7","urls":["bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f","dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80","urls":["bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229","dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol":{"keccak256":"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784","urls":["bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd","dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4","urls":["bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7","dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49","urls":["bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22","dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"keccak256":"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670","urls":["bzz-raw://24915e61c7896c336b60788408cd5792b97b782e98e392920a2c55eb1803fe96","dweb:/ipfs/QmVHhcmFnMYZBCjnVUk6f5quMCDsBR2j669a1nuMiGWY9Z"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"keccak256":"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1","urls":["bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02","dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236","urls":["bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02","dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","urls":["bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453","dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133","urls":["bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8","dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","urls":["bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df","dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d","urls":["bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875","dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72","urls":["bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc","dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"],"license":"MIT"}},"version":1},"id":5}